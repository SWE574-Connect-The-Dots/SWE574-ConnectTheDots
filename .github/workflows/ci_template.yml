name: CI (Docker Compose)

on:
  push:
    branches:
      - "[0-9]*_feature_*"
      - "develop"

jobs:
  compose-ci:
    runs-on: ubuntu-latest

    env:
      COMPOSE_CMD: docker compose --project-directory . -f infra/docker-compose.yml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create backend/.env.docker from GitHub Secrets
        run: |
          mkdir -p backend
          cat > backend/.env.docker <<'EOF'
          DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
          DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}
          DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
          POSTGRES_DB=${{ secrets.DB_NAME }}
          POSTGRES_USER=${{ secrets.DB_USER }}
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=db
          DB_PORT=5432
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          EOF

      - name: Build & start stack
        run: $COMPOSE_CMD up -d --build

      - name: Wait for Postgres to be ready
        run: |
          echo "Waiting for Postgres..."
          for i in {1..60}; do
            if $COMPOSE_CMD exec -T db sh -c 'pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"' >/dev/null 2>&1; then
              echo "Postgres is ready."
              exit 0
            fi
            sleep 2
          done
          echo "Postgres did not become ready in time"
          $COMPOSE_CMD logs db
          exit 1

      - name: Django migrate & collectstatic
        run: |
          $COMPOSE_CMD exec -T api python manage.py migrate --noinput
          $COMPOSE_CMD exec -T api python manage.py collectstatic --noinput || true

      - name: Run Django tests (optional)
        run: |
          # Uncomment ONE of the lines below depending on your setup
          # $COMPOSE_CMD exec -T api pytest -q
          $COMPOSE_CMD exec -T api python manage.py test -v 2 || true

      - name: Smoke test API
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/ >/dev/null; then
              echo "API responded OK"
              exit 0
            fi
            sleep 2
          done
          echo "API did not respond in time"
          $COMPOSE_CMD logs api
          exit 1

      - name: Save logs
        if: always()
        run: |
          $COMPOSE_CMD logs api > django_logs.txt || true
          $COMPOSE_CMD logs db > postgres_logs.txt || true
          $COMPOSE_CMD logs frontend > frontend_logs.txt || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: |
            django_logs.txt
            postgres_logs.txt
            frontend_logs.txt

      - name: Tear down
        if: always()
        run: $COMPOSE_CMD down -v
