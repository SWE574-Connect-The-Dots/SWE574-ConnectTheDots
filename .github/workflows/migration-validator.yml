name: Django Migration Validator

on:
  workflow_call:
    inputs:
      django_settings:
        description: 'Django settings module to use'
        required: false
        default: 'backend.settings'
        type: string
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.8'
        type: string
      requirements_file:
        description: 'Path to requirements file'
        required: false
        default: 'backend/requirements.txt'
        type: string

jobs:
  validate-migrations:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(inputs.requirements_file) }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ inputs.requirements_file }}

      - name: Create test environment file
        working-directory: backend
        run: |
          cat > .env <<EOF
          DJANGO_SECRET_KEY=test-secret-key-for-ci
          DJANGO_DEBUG=False
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB=test_db
          POSTGRES_HOST=localhost
          POSTGRES_PORT=5432
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db
          EOF

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Check migration conflicts
        working-directory: backend
        run: |
          echo "Checking for migration conflicts..."
          
          # Use our migration management script
          python manage_migrations.py check
          
          # Check migration plan
          echo "Checking migration plan..."
          python manage.py migrate --plan
          
          # Check for missing migrations
          echo "Checking for missing migrations..."
          python manage.py makemigrations --check --dry-run

      - name: Test migrations forward and backward
        working-directory: backend
        env:
          DJANGO_SETTINGS_MODULE: ${{ inputs.django_settings }}
        run: |
          echo "Testing migration application..."
          
          # Apply all migrations
          python manage.py migrate --noinput
          
          # Check current migration state
          python manage.py showmigrations
          
          # Test rollback (go back one migration and forward again)
          LATEST_MIGRATION=$(python manage.py showmigrations api --plan | tail -1 | sed -E 's/.*api\.([0-9]+_.*)$/\1/')
          if [ -n "$LATEST_MIGRATION" ]; then
            echo "Testing rollback and reapplication of latest migration: $LATEST_MIGRATION"
            
            # Get previous migration
            PREV_MIGRATION=$(python manage.py showmigrations api --plan | tail -2 | head -1 | sed -E 's/.*api\.([0-9]+_.*)$/\1/' || echo "")
            
            if [ -n "$PREV_MIGRATION" ]; then
              # Rollback to previous migration
              python manage.py migrate api $PREV_MIGRATION --noinput
              
              # Reapply latest migration
              python manage.py migrate --noinput
              
              echo "Migration rollback and reapplication successful"
            else
              echo "Skipping rollback test - only one migration found"
            fi
          fi

      - name: Generate migration report
        if: always()
        working-directory: backend
        run: |
          echo "# Migration Validation Report" >> ../migration_report.md
          echo "" >> ../migration_report.md
          echo "## Current Migration Status" >> ../migration_report.md
          echo '```' >> ../migration_report.md
          python manage.py showmigrations >> ../migration_report.md
          echo '```' >> ../migration_report.md
          echo "" >> ../migration_report.md
          
          echo "## Migration Plan" >> ../migration_report.md
          echo '```' >> ../migration_report.md
          python manage.py migrate --plan >> ../migration_report.md
          echo '```' >> ../migration_report.md
          echo "" >> ../migration_report.md
          
          # Check for any issues
          echo "## Validation Results" >> ../migration_report.md
          if python manage_migrations.py check > /dev/null 2>&1; then
            echo "No migration conflicts detected" >> ../migration_report.md
          else
            echo "Migration conflicts detected - see logs above" >> ../migration_report.md
          fi

      - name: Upload migration report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: migration-validation-report
          path: migration_report.md

      - name: Add report to job summary
        if: always()
        run: |
          if [ -f migration_report.md ]; then
            cat migration_report.md >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR with migration info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('migration_report.md')) {
              const report = fs.readFileSync('migration_report.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Migration Validation Results\n\n${report}`
              });
            }