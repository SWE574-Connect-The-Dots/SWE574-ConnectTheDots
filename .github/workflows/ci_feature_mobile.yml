name: Android APK Feature/Bugfix/Refactor CI

on:
  push:
    branches:
      - "feature/*"
      - "bugfix/*"
      - "refactor/*"     
    paths:
      - "mobile/**"            

permissions:
  contents: read
  checks: write      
  pull-requests: write


jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: mobile   

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Gradle cache + wrapper validation
        uses: gradle/actions/setup-gradle@v3

      - name: Build debug APK
        run: ./gradlew :app:assembleDevelopDebug --stacktrace --no-daemon
        # ":" prefix ensures gradle builds the app module specifically
      
      - name: Run unit tests #mobile unit test
        run: ./gradlew :app:testDevelopDebugUnitTest --stacktrace --no-daemon

      - name: Publish test results to GitHub summary
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Android Unit Tests
          path: mobile/app/build/test-results/**/TEST-*.xml
          reporter: java-junit
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Tests tab
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: mobile/app/build/test-results/**/TEST-*.xml
          check_name: Android Unit Tests
          comment_mode: always
          fail_on: test failures
      
      - name: Generate coverage markdown summary
        run: |
          REPORT_FILE="mobile/app/build/reports/jacoco/jacocoDevelopDebugReport/jacocoDevelopDebugReport.xml"
          OUTPUT_FILE="mobile/app/build/reports/jacoco/jacocoDevelopDebugReport/coverage_summary.md"
          mkdir -p "$(dirname $OUTPUT_FILE)"
          echo "### ðŸ“Š Android Unit Test Coverage" > $OUTPUT_FILE
          echo '' >> $OUTPUT_FILE
          echo '```text' >> $OUTPUT_FILE
          # extract coverage line % using awk
          awk -F'"' '/<counter type="LINE"/{missed+=$4; covered+=$6} END {printf "Line Coverage: %.2f%%\n", covered/(covered+missed)*100}' $REPORT_FILE >> $OUTPUT_FILE
          echo '' >> $OUTPUT_FILE
          echo 'Detailed report available in artifact (HTML)' >> $OUTPUT_FILE
          echo '```' >> $OUTPUT_FILE

      - name: Publish Coverage Report tab
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('mobile/app/build/reports/jacoco/jacocoDevelopDebugReport/coverage_summary.md', 'utf8');
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Coverage Report',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'ðŸ“Š Android Unit Test Coverage',
                summary: 'JaCoCo coverage summary for Android unit tests',
                text: report.substring(0, 65000)
              }
            });

      # set a custom artifact name
      # Extract branch number & commit SHA, build artifact name
      - name: Set artifact name
        id: vars
        run: |
          BRANCH_NAME="${GITHUB_REF_NAME}"
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          SAFE_BRANCH=$(echo "$BRANCH_NAME" | tr '/' '-')

          if [[ "$SAFE_BRANCH" == "develop" ]]; then
            ISSUE_NUM="develop"
          elif [[ "$SAFE_BRANCH" =~ feature-([0-9]+)-.* ]]; then
            ISSUE_NUM=$(echo "$SAFE_BRANCH" | sed -E 's|feature-([0-9]+)-.*|\1|')
          elif [[ "$SAFE_BRANCH" =~ bugfix-([0-9]+)-.* ]]; then
            ISSUE_NUM=$(echo "$SAFE_BRANCH" | sed -E 's|bugfix-([0-9]+)-.*|\1|')
          elif [[ "$SAFE_BRANCH" =~ refactor-([0-9]+)-.* ]]; then
            ISSUE_NUM=$(echo "$SAFE_BRANCH" | sed -E 's|refactor-([0-9]+)-.*|\1|')
          else
            ISSUE_NUM="unknown"
          fi

          ARTIFACT_NAME="${ISSUE_NUM}-${SHORT_SHA}-beta.apk"
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      #Rename the built APK file
      - name: Rename APK
        run: |
          cd app/build/outputs/apk/develop/debug
          ORIGINAL_APK=$(ls *.apk | head -n 1)
          mv "$ORIGINAL_APK" "${{ steps.vars.outputs.artifact_name }}"
      
    
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact_name }}
          path: mobile/app/build/outputs/apk/develop/debug/${{ steps.vars.outputs.artifact_name }}
